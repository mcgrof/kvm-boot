#!/bin/bash
# Copyright (C) 2017-2018 Luis R. Rodriguez <mcgrof@kernel.org>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of copyleft-next (version 0.3.1 or later) as published
# at http://copyleft-next.org/.

setup_headers()
{
	if [ -z $KVM_BOOT_LIB_DIR ]; then
		KVM_BOOT_LIB_DIR=$(dirname $0)
	fi
	source $KVM_BOOT_LIB_DIR/kvm_boot_lib.sh
}

KERNEL=""
USE_KERNEL=""
USE_INITRD=""

get_random()
{
	head -10 /dev/random | strings | sed ':a;N;$!ba;s/\n/ /g' | awk '{print $1$2$3$4}'
}

str_to_hex()
{
	echo $(hexdump -e '"%X"' <<< "$1" | sha256sum | awk '{print $1}')
}

str_to_mac()
{
	INPUT=$1
	FILE=$(basename $INPUT)
	MAC="52:54:00:"
	COUNT=0
	hex=$(str_to_hex $FILE)
	hex_long=$(echo $hex | sed -e 's/\(.\)/\1 /g')


	for i in $hex_long;  do
		if [ $COUNT -ge 6 ]; then
			break
		fi
		if [ $COUNT -eq 0 ]; then
			MAC="${MAC}$i"
		else
			if [[ "$(($COUNT%2))" -eq 1 ]]; then
				if [ $COUNT -eq 5 ]; then
					MAC="${MAC}${i}"
				else
					MAC="${MAC}${i}:"
				fi
			else
				MAC="${MAC}${i}"
			fi
		fi
		let COUNT=$COUNT+1
	done
	echo $MAC
}

set_kvm_boot()
{
	if [ -z $KVM_BOOT_MAC ]; then
		MAC=$(str_to_mac $KVM_BOOT_TARGET)
	else
		MAC=$KVM_BOOT_MAC
	fi
	if [ -z $KVM_BOOT ]; then
		KVM_BOOT=(
			$KVM_BOOT_QEMU
			-cpu kvm64
			-enable-kvm
			$USE_KERNEL
			-m $KVM_BOOT_MEM
			-smp $KVM_BOOT_CPUS
			-netdev vde,sock=$KVM_BOOT_VDE_SOCKET,group=kvm,mode=0660,id=vde0
			-device e1000,netdev=vde0,mac=$MAC
			$KVM_BOOT_USE_TARGET
			$KVM_BOOT_USE_NEXT_TARGET
			$KVM_BOOT_EXTRA_DEV_0001
			-monitor pty
			-serial stdio
			-chardev pty,id=ttyS1
			-device isa-serial,chardev=ttyS1
			-chardev pty,id=ttyS2
			-device isa-serial,chardev=ttyS2
			$KVM_BOOT_USE_GRAPHICS
			$USE_INITRD
			-boot order=d
		)
	fi
}

usage()
{
	echo -e "Usage $0 [ -d | -b | -l | -k /boot/some-kernel-vmlinuz ]"
	echo -e ""
	echo -e "-d -- Use debug qemu version"
	echo -e "-b -- Use boot from hard disk's own kernel, grub is installed"
	echo -e "-t -- Use the specified file as the disk image target"
	echo -e "-n -- Use the specified file as the linux-next disk image target"
	echo -e "-k -- Use this passed kernel file on /boot/, we'll infer initramfs"
	echo -e "-l -- Use the latest kernel and initramfs in /boot/"
	echo -e "-m -- Use this value for memory, default is 1024"
	echo -e "-c -- Use this value for CPUs, default is 4"
	echo -e ""
	echo -e "For example valid uses:"
	echo -e "\t$0 -k /boot/initrd-4.9.0-rc5-next-20161117-1-default+"
	echo -e "\t$0 -l"
	echo -e ""
}

setup_qemu_kernel()
{

	USE_KERNEL="-kernel $KERNEL"
	USE_INITRD="-initrd $INITRAMFS"
	explain_using
}

explain_using()
{
	echo -e "Using:"
	echo -e "Kernel:\t\t$KERNEL"
	echo -e "Initramfs:\t$INITRAMFS"
}

infer_latest_kernel()
{
	LATEST_KERNEL=$(ls -atr /boot/vmlinuz*| tail -1)
	LATEST_INITRAMFS=$(ls -atr /boot/initrd*| tail -1)

	if [[ -f $LATEST_KERNEL && -f $LATEST_INITRAMFS ]]; then
		KERNEL=$LATEST_KERNEL
		INITRAMFS=$LATEST_INITRAMFS
	else
		echo -e "No detected latest kernel and initramfs..."
		echo -e "$LATEST_KERNEL"
		exit 1
	fi
	setup_qemu_kernel
}

parse_passed_kernel()
{
	PASSED_KERNEL=$1
	if [[ -f $PASSED_KERNEL ]]; then
		echo -e "Trying kernel:\t$PASSED_KERNEL"
		KERNEL=$PASSED_KERNEL
		INFER_INITRAMFS="/boot/initrd-${KERNEL#/boot/vmlinuz-*}"
		if [[ ! -f $INFER_INITRAMFS ]]; then
			echo "No initramfs detected -- fix $0 to handle "
			echo "your distribution or case"
			echo -e "We guessed you might have:\n$INFER_INITRAMFS"
			exit 1
		else
			INITRAMFS=$INFER_INITRAMFS
		fi
	else
		exit 1
	fi
	setup_qemu_kernel
}

parse_args()
{
	case $1 in
		"--help")
			usage
			exit 1
			;;
		"-h")
			usage
			exit 1
			;;
		"-m")
			shift
			KVM_BOOT_MEM=$1
			shift
			parse_args $@
			;;
		"-c")
			shift
			KVM_BOOT_CPUS=$1
			shift
			parse_args $@
			;;
		"-d")
			KVM_BOOT_QEMU="$HOME/devel/qemu/x86_64-softmmu/qemu-system-x86_64"
			shift
			parse_args $@
			;;
		"-k")
			shift
			parse_passed_kernel $1
			shift
			parse_args $@
			;;
		"-l")
			shift
			infer_latest_kernel
			parse_args $@
			;;
		"-b")
			shift
			;;
		"-t")
			shift
			KVM_BOOT_TARGET=$1
			shift
			KVM_BOOT_USE_TARGET="-hda $KVM_BOOT_TARGET"
			parse_args $@
			;;
		"-n")
			shift
			KVM_BOOT_NEXT_TARGET=$1
			if [[ "$KVM_BOOT_NEXT_TARGET" == "none" ]]; then
				KVM_BOOT_USE_NEXT_TARGET=""
			else
				KVM_BOOT_USE_NEXT_TARGET="-hdb $KVM_BOOT_NEXT_TARGET"
			fi
			shift
			parse_args $@
			;;
		*)
			;;
	esac
}

setup_headers
allow_user_defaults

if [[ $# -eq 0 ]]; then
	infer_latest_kernel
else
	parse_args $@
fi

set_kvm_boot

if [[ "$USE_KERNEL" == "" ]]; then
	echo
	echo "Going to boot directly onto image disk"
	echo "---------------------------------------"
	echo "Calling:"
	echo "${KVM_BOOT[@]}"
	"${KVM_BOOT[@]}"
else
	echo "Going to boot custom kernel"
	echo "---------------------------"
	echo "${KVM_BOOT[@]}" --append "${KVM_BOOT_KERNEL_APPEND[*]}"
	"${KVM_BOOT[@]}" --append "${KVM_BOOT_KERNEL_APPEND[*]}"
fi
